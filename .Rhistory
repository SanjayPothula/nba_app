jbut<-players %>% mutate(war = vorp * 2.7) %>%
select(playerID, year, age, teamid, pos, usg_pct, ts_pct, fg3a_per_fga_pct,
ast_pct, orb_pct, drb_pct, tov_pct, stl_pct, blk_pct,
bpm, vorp, war) %>% group_by(year) %>% mutate(
usg_pct = round(cume_dist(usg_pct)*100),
ts_pct = round(cume_dist(ts_pct)*100),
fg3a_per_fga_pct = round(cume_dist(fg3a_per_fga_pct)*100),
ast_pct = round(cume_dist(ast_pct)*100),
orb_pct = round(cume_dist(orb_pct)*100),
drb_pct = round(cume_dist(drb_pct)*100),
tov_pct = round(cume_dist(tov_pct)*100),
stl_pct = round(cume_dist(stl_pct)*100),
blk_pct = round(cume_dist(blk_pct)*100),
bpm = round(cume_dist(bpm)*100),
vorp = round(cume_dist(vorp)*100),
war = round(cume_dist(war)*100)
) %>% filter(playerID == input$playerID) %>% ungroup() %>% select(year, usg_pct, ts_pct, fg3a_per_fga_pct,
ast_pct, orb_pct, drb_pct, tov_pct, stl_pct, blk_pct,
bpm, vorp, war)
playerGraph<-melt(jbut, id.vars = "year")
playerGraph %>% filter(year == input$year_input) %>% ggplot(aes(x = variable, y = value, fill = value)) +
geom_bar(stat = 'identity') + theme_bw() +
scale_fill_gradient2(low = 'red', mid = 'orange', high = 'yellow', midpoint = 50) +
xlab("Category") + ylab("Percentile") + ggtitle("Percentile Graph")+ geom_hline(aes(yintercept = 50), colour = "red")
})
session$onSessionEnded(stopApp)
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
library(dplyr)
library(reshape2)
library(ggplot2)
library(ggthemes)
players = read.csv("data/players.csv")
players <- players %>% filter(teamid != 'TOT')
playerNames <- setNames(as.character(players$playerID), players$playerName)
playerNames <- as.character(players$playerID)
names(playerNames) <- players$playerName
library(shiny)
# Define UI for application that draws a histogram
ui<-navbarPage(title="NBA Season",inverse = TRUE,
tabPanel("Player Performance",
sidebarPanel(id="sidebar",
uiOutput("player_photo"),
selectInput(
"playerID", "Player:",
choices = playerNames, selected = 'afflaar01'
), width = 2
)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Stats",DT::dataTableOutput("stats"), DT::dataTableOutput("stats_avg"), uiOutput("yearid"), plotOutput("percentile_graph"))
))
)
# Define server logic required to draw a histogram
server <- function(input, output, session) {
output$player_photo<-renderUI(tags$img(src = paste("https://d2cwpp38twqe55.cloudfront.net/req/201811081/images/players/",input$playerID,".jpg", sep = ""), height=285, width=205,alt = "photo")
)
output$stats<-DT::renderDataTable({
player_df<-players %>% filter(playerID == input$playerID) %>% mutate(war = vorp * 2.7) %>%
select(year, age, teamid, pos, usg_pct, ts_pct, fg3a_per_fga_pct,
ast_pct, orb_pct, drb_pct, tov_pct, stl_pct, blk_pct,
bpm, vorp, war) %>% mutate(
usg_pct = round(usg_pct, digits = 1),
ts_pct = round(ts_pct, digits = 3),
fg3a_per_fga_pct = round(fg3a_per_fga_pct, digits = 3),
ast_pct = round(ast_pct, digits = 1),
orb_pct = round(orb_pct, digits = 1),
drb_pct = round(drb_pct, digits = 1),
tov_pct = round(tov_pct, digits = 1),
stl_pct = round(stl_pct, digits = 1),
blk_pct = round(blk_pct, digits = 1),
bpm = round(bpm, digits = 1),
vorp = round(vorp, digits = 1),
war = round(war, digits = 1)
)
DT::datatable(player_df, rownames = FALSE, options = list(dom = 't',ordering = F, pageLength = 25))
})
output$stats_avg<-DT::renderDataTable({
player_df<-players %>% filter(year == max(year[playerID == input$playerID])) %>% filter(pos == pos[playerID == input$playerID][1]) %>% mutate(war = vorp * 2.7) %>%
select(playerID, year, age, teamid, pos, mp, usg_pct, ts_pct, fg3a_per_fga_pct,
ast_pct, orb_pct, drb_pct, tov_pct, stl_pct, blk_pct,
bpm, vorp, war) %>% group_by(pos) %>% summarise(
year = max(year),
age = '-',
teamid = '-',
usg_pct = round(weighted.mean(usg_pct, mp), digits = 1),
ts_pct = round(weighted.mean(ts_pct, mp, na.rm = T), digits = 3),
fg3a_per_fga_pct = round(weighted.mean(fg3a_per_fga_pct, mp, na.rm = T), digits = 3),
ast_pct = round(weighted.mean(ast_pct, mp), digits = 1),
orb_pct = round(weighted.mean(orb_pct, mp), digits = 1),
drb_pct = round(weighted.mean(drb_pct, mp), digits = 1),
tov_pct = round(weighted.mean(tov_pct, mp, na.rm = T), digits = 1),
stl_pct = round(weighted.mean(stl_pct, mp), digits = 1),
blk_pct = round(weighted.mean(blk_pct, mp), digits = 1),
bpm = round(weighted.mean(bpm, mp), digits = 1),
vorp = round(weighted.mean(vorp, mp), digits = 1),
war = round(weighted.mean(war, mp), digits = 1)
)
DT::datatable(player_df, rownames = FALSE, options = list(dom = 't',ordering = F))
})
output$yearid <- renderUI({
selectInput("year_input", "Season:", choices = players$year[players$playerID == input$playerID], selected = max(players$year[players$playerID == input$playerID]))
})
output$percentile_graph <- renderPlot({
players <- players %>% group_by(year, playerName, playerID, age) %>% summarise(
mp_w = sum(mp, na.rm = T),
vorp = sum(vorp, na.rm = T),
ast_pct = weighted.mean(ast_pct, mp, na.rm = T),
fg3a_per_fga_pct = weighted.mean(fg3a_per_fga_pct, mp, na.rm = T),
ts_pct = weighted.mean(ts_pct, mp, na.rm = T),
usg_pct = weighted.mean(usg_pct, mp, na.rm = T),
tov_pct = weighted.mean(tov_pct, mp, na.rm = T),
drb_pct = weighted.mean(drb_pct, mp, na.rm = T),
stl_pct = weighted.mean(stl_pct, mp, na.rm = T),
blk_pct = weighted.mean(blk_pct, mp, na.rm = T)
)
jbut<-players %>% mutate(war = vorp * 2.7) %>%
select(playerID, year, age, teamid, pos, usg_pct, ts_pct, fg3a_per_fga_pct,
ast_pct, orb_pct, drb_pct, tov_pct, stl_pct, blk_pct,
bpm, vorp, war) %>% group_by(year) %>% mutate(
usg_pct = round(cume_dist(usg_pct)*100),
ts_pct = round(cume_dist(ts_pct)*100),
fg3a_per_fga_pct = round(cume_dist(fg3a_per_fga_pct)*100),
ast_pct = round(cume_dist(ast_pct)*100),
orb_pct = round(cume_dist(orb_pct)*100),
drb_pct = round(cume_dist(drb_pct)*100),
tov_pct = round(cume_dist(tov_pct)*100),
stl_pct = round(cume_dist(stl_pct)*100),
blk_pct = round(cume_dist(blk_pct)*100),
bpm = round(cume_dist(bpm)*100),
vorp = round(cume_dist(vorp)*100),
war = round(cume_dist(war)*100)
) %>% filter(playerID == input$playerID) %>% ungroup() %>% select(year, usg_pct, ts_pct, fg3a_per_fga_pct,
ast_pct, orb_pct, drb_pct, tov_pct, stl_pct, blk_pct,
bpm, vorp, war)
playerGraph<-melt(jbut, id.vars = "year")
playerGraph %>% filter(year == input$year_input) %>% ggplot(aes(x = variable, y = value, fill = value)) +
geom_bar(stat = 'identity') + theme_bw() +
scale_fill_gradient2(low = 'red', mid = 'orange', high = 'yellow', midpoint = 50) +
xlab("Category") + ylab("Percentile") + ggtitle("Percentile Graph")+ geom_hline(aes(yintercept = 50), colour = "red")
})
session$onSessionEnded(stopApp)
}
# Run the application
shinyApp(ui = ui, server = server)
library(dplyr)
library(reshape2)
library(ggplot2)
library(ggthemes)
players = read.csv("data/players.csv")
players <- players %>% filter(teamid != 'TOT')
playerNames <- setNames(as.character(players$playerID), players$playerName)
playerNames <- as.character(players$playerID)
names(playerNames) <- players$playerName
library(shiny)
# Define UI for application that draws a histogram
ui<-navbarPage(title="NBA Season",inverse = TRUE,
tabPanel("Player Performance",
sidebarPanel(id="sidebar",
uiOutput("player_photo"),
selectInput(
"playerID", "Player:",
choices = playerNames, selected = 'afflaar01'
), width = 2
)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Stats",DT::dataTableOutput("stats"), DT::dataTableOutput("stats_avg"), uiOutput("yearid"), plotOutput("percentile_graph"))
))
)
# Define server logic required to draw a histogram
server <- function(input, output, session) {
output$player_photo<-renderUI(tags$img(src = paste("https://d2cwpp38twqe55.cloudfront.net/req/201811081/images/players/",input$playerID,".jpg", sep = ""), height=285, width=205,alt = "photo")
)
output$stats<-DT::renderDataTable({
player_df<-players %>% filter(playerID == input$playerID) %>% mutate(war = vorp * 2.7) %>%
select(year, age, teamid, pos, usg_pct, ts_pct, fg3a_per_fga_pct,
ast_pct, orb_pct, drb_pct, tov_pct, stl_pct, blk_pct,
bpm, vorp, war) %>% mutate(
usg_pct = round(usg_pct, digits = 1),
ts_pct = round(ts_pct, digits = 3),
fg3a_per_fga_pct = round(fg3a_per_fga_pct, digits = 3),
ast_pct = round(ast_pct, digits = 1),
orb_pct = round(orb_pct, digits = 1),
drb_pct = round(drb_pct, digits = 1),
tov_pct = round(tov_pct, digits = 1),
stl_pct = round(stl_pct, digits = 1),
blk_pct = round(blk_pct, digits = 1),
bpm = round(bpm, digits = 1),
vorp = round(vorp, digits = 1),
war = round(war, digits = 1)
)
DT::datatable(player_df, rownames = FALSE, options = list(dom = 't',ordering = F, pageLength = 25))
})
output$stats_avg<-DT::renderDataTable({
player_df<-players %>% filter(year == max(year[playerID == input$playerID])) %>% filter(pos == pos[playerID == input$playerID][1]) %>% mutate(war = vorp * 2.7) %>%
select(playerID, year, age, teamid, pos, mp, usg_pct, ts_pct, fg3a_per_fga_pct,
ast_pct, orb_pct, drb_pct, tov_pct, stl_pct, blk_pct,
bpm, vorp, war) %>% group_by(pos) %>% summarise(
year = max(year),
age = '-',
teamid = '-',
usg_pct = round(weighted.mean(usg_pct, mp), digits = 1),
ts_pct = round(weighted.mean(ts_pct, mp, na.rm = T), digits = 3),
fg3a_per_fga_pct = round(weighted.mean(fg3a_per_fga_pct, mp, na.rm = T), digits = 3),
ast_pct = round(weighted.mean(ast_pct, mp), digits = 1),
orb_pct = round(weighted.mean(orb_pct, mp), digits = 1),
drb_pct = round(weighted.mean(drb_pct, mp), digits = 1),
tov_pct = round(weighted.mean(tov_pct, mp, na.rm = T), digits = 1),
stl_pct = round(weighted.mean(stl_pct, mp), digits = 1),
blk_pct = round(weighted.mean(blk_pct, mp), digits = 1),
bpm = round(weighted.mean(bpm, mp), digits = 1),
vorp = round(weighted.mean(vorp, mp), digits = 1),
war = round(weighted.mean(war, mp), digits = 1)
)
DT::datatable(player_df, rownames = FALSE, options = list(dom = 't',ordering = F))
})
output$yearid <- renderUI({
selectInput("year_input", "Season:", choices = players$year[players$playerID == input$playerID], selected = max(players$year[players$playerID == input$playerID]))
})
output$percentile_graph <- renderPlot({
players <- players %>% group_by(year, playerName, playerID, age, pos) %>% summarise(
mp_w = sum(mp, na.rm = T),
vorp = sum(vorp, na.rm = T),
ast_pct = weighted.mean(ast_pct, mp, na.rm = T),
fg3a_per_fga_pct = weighted.mean(fg3a_per_fga_pct, mp, na.rm = T),
ts_pct = weighted.mean(ts_pct, mp, na.rm = T),
usg_pct = weighted.mean(usg_pct, mp, na.rm = T),
tov_pct = weighted.mean(tov_pct, mp, na.rm = T),
drb_pct = weighted.mean(drb_pct, mp, na.rm = T),
stl_pct = weighted.mean(stl_pct, mp, na.rm = T),
blk_pct = weighted.mean(blk_pct, mp, na.rm = T)
)
jbut<-players %>% mutate(war = vorp * 2.7) %>%
select(playerID, year, age, pos, usg_pct, ts_pct, fg3a_per_fga_pct,
ast_pct, orb_pct, drb_pct, tov_pct, stl_pct, blk_pct,
bpm, vorp, war) %>% group_by(year) %>% mutate(
usg_pct = round(cume_dist(usg_pct)*100),
ts_pct = round(cume_dist(ts_pct)*100),
fg3a_per_fga_pct = round(cume_dist(fg3a_per_fga_pct)*100),
ast_pct = round(cume_dist(ast_pct)*100),
orb_pct = round(cume_dist(orb_pct)*100),
drb_pct = round(cume_dist(drb_pct)*100),
tov_pct = round(cume_dist(tov_pct)*100),
stl_pct = round(cume_dist(stl_pct)*100),
blk_pct = round(cume_dist(blk_pct)*100),
bpm = round(cume_dist(bpm)*100),
vorp = round(cume_dist(vorp)*100),
war = round(cume_dist(war)*100)
) %>% filter(playerID == input$playerID) %>% ungroup() %>% select(year, usg_pct, ts_pct, fg3a_per_fga_pct,
ast_pct, orb_pct, drb_pct, tov_pct, stl_pct, blk_pct,
bpm, vorp, war)
playerGraph<-melt(jbut, id.vars = "year")
playerGraph %>% filter(year == input$year_input) %>% ggplot(aes(x = variable, y = value, fill = value)) +
geom_bar(stat = 'identity') + theme_bw() +
scale_fill_gradient2(low = 'red', mid = 'orange', high = 'yellow', midpoint = 50) +
xlab("Category") + ylab("Percentile") + ggtitle("Percentile Graph")+ geom_hline(aes(yintercept = 50), colour = "red")
})
session$onSessionEnded(stopApp)
}
# Run the application
shinyApp(ui = ui, server = server)
library(dplyr)
library(reshape2)
library(ggplot2)
library(ggthemes)
players = read.csv("data/players.csv")
players <- players %>% filter(teamid != 'TOT')
playerNames <- setNames(as.character(players$playerID), players$playerName)
playerNames <- as.character(players$playerID)
names(playerNames) <- players$playerName
library(shiny)
# Define UI for application that draws a histogram
ui<-navbarPage(title="NBA Season",inverse = TRUE,
tabPanel("Player Performance",
sidebarPanel(id="sidebar",
uiOutput("player_photo"),
selectInput(
"playerID", "Player:",
choices = playerNames, selected = 'afflaar01'
), width = 2
)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Stats",DT::dataTableOutput("stats"), DT::dataTableOutput("stats_avg"), uiOutput("yearid"), plotOutput("percentile_graph"))
))
)
# Define server logic required to draw a histogram
server <- function(input, output, session) {
output$player_photo<-renderUI(tags$img(src = paste("https://d2cwpp38twqe55.cloudfront.net/req/201811081/images/players/",input$playerID,".jpg", sep = ""), height=285, width=205,alt = "photo")
)
output$stats<-DT::renderDataTable({
player_df<-players %>% filter(playerID == input$playerID) %>% mutate(war = vorp * 2.7) %>%
select(year, age, teamid, pos, usg_pct, ts_pct, fg3a_per_fga_pct,
ast_pct, orb_pct, drb_pct, tov_pct, stl_pct, blk_pct,
bpm, vorp, war) %>% mutate(
usg_pct = round(usg_pct, digits = 1),
ts_pct = round(ts_pct, digits = 3),
fg3a_per_fga_pct = round(fg3a_per_fga_pct, digits = 3),
ast_pct = round(ast_pct, digits = 1),
orb_pct = round(orb_pct, digits = 1),
drb_pct = round(drb_pct, digits = 1),
tov_pct = round(tov_pct, digits = 1),
stl_pct = round(stl_pct, digits = 1),
blk_pct = round(blk_pct, digits = 1),
bpm = round(bpm, digits = 1),
vorp = round(vorp, digits = 1),
war = round(war, digits = 1)
)
DT::datatable(player_df, rownames = FALSE, options = list(dom = 't',ordering = F, pageLength = 25))
})
output$stats_avg<-DT::renderDataTable({
player_df<-players %>% filter(year == max(year[playerID == input$playerID])) %>% filter(pos == pos[playerID == input$playerID][1]) %>% mutate(war = vorp * 2.7) %>%
select(playerID, year, age, teamid, pos, mp, usg_pct, ts_pct, fg3a_per_fga_pct,
ast_pct, orb_pct, drb_pct, tov_pct, stl_pct, blk_pct,
bpm, vorp, war) %>% group_by(pos) %>% summarise(
year = max(year),
age = '-',
teamid = '-',
usg_pct = round(weighted.mean(usg_pct, mp), digits = 1),
ts_pct = round(weighted.mean(ts_pct, mp, na.rm = T), digits = 3),
fg3a_per_fga_pct = round(weighted.mean(fg3a_per_fga_pct, mp, na.rm = T), digits = 3),
ast_pct = round(weighted.mean(ast_pct, mp), digits = 1),
orb_pct = round(weighted.mean(orb_pct, mp), digits = 1),
drb_pct = round(weighted.mean(drb_pct, mp), digits = 1),
tov_pct = round(weighted.mean(tov_pct, mp, na.rm = T), digits = 1),
stl_pct = round(weighted.mean(stl_pct, mp), digits = 1),
blk_pct = round(weighted.mean(blk_pct, mp), digits = 1),
bpm = round(weighted.mean(bpm, mp), digits = 1),
vorp = round(weighted.mean(vorp, mp), digits = 1),
war = round(weighted.mean(war, mp), digits = 1)
)
DT::datatable(player_df, rownames = FALSE, options = list(dom = 't',ordering = F))
})
output$yearid <- renderUI({
selectInput("year_input", "Season:", choices = players$year[players$playerID == input$playerID], selected = max(players$year[players$playerID == input$playerID]))
})
output$percentile_graph <- renderPlot({
players <- players %>% group_by(year, playerName, playerID, age, pos) %>% summarise(
mp_w = sum(mp, na.rm = T),
vorp = sum(vorp, na.rm = T),
ast_pct = weighted.mean(ast_pct, mp, na.rm = T),
fg3a_per_fga_pct = weighted.mean(fg3a_per_fga_pct, mp, na.rm = T),
ts_pct = weighted.mean(ts_pct, mp, na.rm = T),
usg_pct = weighted.mean(usg_pct, mp, na.rm = T),
tov_pct = weighted.mean(tov_pct, mp, na.rm = T),
orb_pct = weighted.mean(orb_pct, mp, na.rm = T),
drb_pct = weighted.mean(drb_pct, mp, na.rm = T),
stl_pct = weighted.mean(stl_pct, mp, na.rm = T),
blk_pct = weighted.mean(blk_pct, mp, na.rm = T)
)
jbut<-players %>% mutate(war = vorp * 2.7) %>%
select(playerID, year, age, pos, usg_pct, ts_pct, fg3a_per_fga_pct,
ast_pct, orb_pct, drb_pct, tov_pct, stl_pct, blk_pct,
bpm, vorp, war) %>% group_by(year) %>% mutate(
usg_pct = round(cume_dist(usg_pct)*100),
ts_pct = round(cume_dist(ts_pct)*100),
fg3a_per_fga_pct = round(cume_dist(fg3a_per_fga_pct)*100),
ast_pct = round(cume_dist(ast_pct)*100),
orb_pct = round(cume_dist(orb_pct)*100),
drb_pct = round(cume_dist(drb_pct)*100),
tov_pct = round(cume_dist(tov_pct)*100),
stl_pct = round(cume_dist(stl_pct)*100),
blk_pct = round(cume_dist(blk_pct)*100),
bpm = round(cume_dist(bpm)*100),
vorp = round(cume_dist(vorp)*100),
war = round(cume_dist(war)*100)
) %>% filter(playerID == input$playerID) %>% ungroup() %>% select(year, usg_pct, ts_pct, fg3a_per_fga_pct,
ast_pct, orb_pct, drb_pct, tov_pct, stl_pct, blk_pct,
bpm, vorp, war)
playerGraph<-melt(jbut, id.vars = "year")
playerGraph %>% filter(year == input$year_input) %>% ggplot(aes(x = variable, y = value, fill = value)) +
geom_bar(stat = 'identity') + theme_bw() +
scale_fill_gradient2(low = 'red', mid = 'orange', high = 'yellow', midpoint = 50) +
xlab("Category") + ylab("Percentile") + ggtitle("Percentile Graph")+ geom_hline(aes(yintercept = 50), colour = "red")
})
session$onSessionEnded(stopApp)
}
# Run the application
shinyApp(ui = ui, server = server)
library(dplyr)
library(reshape2)
library(ggplot2)
library(ggthemes)
players = read.csv("data/players.csv")
players <- players %>% filter(teamid != 'TOT')
playerNames <- setNames(as.character(players$playerID), players$playerName)
playerNames <- as.character(players$playerID)
names(playerNames) <- players$playerName
library(shiny)
# Define UI for application that draws a histogram
ui<-navbarPage(title="NBA Season",inverse = TRUE,
tabPanel("Player Performance",
sidebarPanel(id="sidebar",
uiOutput("player_photo"),
selectInput(
"playerID", "Player:",
choices = playerNames, selected = 'afflaar01'
), width = 2
)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Stats",DT::dataTableOutput("stats"), DT::dataTableOutput("stats_avg"), uiOutput("yearid"), plotOutput("percentile_graph"))
))
)
# Define server logic required to draw a histogram
server <- function(input, output, session) {
output$player_photo<-renderUI(tags$img(src = paste("https://d2cwpp38twqe55.cloudfront.net/req/201811081/images/players/",input$playerID,".jpg", sep = ""), height=285, width=205,alt = "photo")
)
output$stats<-DT::renderDataTable({
player_df<-players %>% filter(playerID == input$playerID) %>% mutate(war = vorp * 2.7) %>%
select(year, age, teamid, pos, usg_pct, ts_pct, fg3a_per_fga_pct,
ast_pct, orb_pct, drb_pct, tov_pct, stl_pct, blk_pct,
bpm, vorp, war) %>% mutate(
usg_pct = round(usg_pct, digits = 1),
ts_pct = round(ts_pct, digits = 3),
fg3a_per_fga_pct = round(fg3a_per_fga_pct, digits = 3),
ast_pct = round(ast_pct, digits = 1),
orb_pct = round(orb_pct, digits = 1),
drb_pct = round(drb_pct, digits = 1),
tov_pct = round(tov_pct, digits = 1),
stl_pct = round(stl_pct, digits = 1),
blk_pct = round(blk_pct, digits = 1),
bpm = round(bpm, digits = 1),
vorp = round(vorp, digits = 1),
war = round(war, digits = 1)
)
DT::datatable(player_df, rownames = FALSE, options = list(dom = 't',ordering = F, pageLength = 25))
})
output$stats_avg<-DT::renderDataTable({
player_df<-players %>% filter(year == max(year[playerID == input$playerID])) %>% filter(pos == pos[playerID == input$playerID][1]) %>% mutate(war = vorp * 2.7) %>%
select(playerID, year, age, teamid, pos, mp, usg_pct, ts_pct, fg3a_per_fga_pct,
ast_pct, orb_pct, drb_pct, tov_pct, stl_pct, blk_pct,
bpm, vorp, war) %>% group_by(pos) %>% summarise(
year = max(year),
age = '-',
teamid = '-',
usg_pct = round(weighted.mean(usg_pct, mp), digits = 1),
ts_pct = round(weighted.mean(ts_pct, mp, na.rm = T), digits = 3),
fg3a_per_fga_pct = round(weighted.mean(fg3a_per_fga_pct, mp, na.rm = T), digits = 3),
ast_pct = round(weighted.mean(ast_pct, mp), digits = 1),
orb_pct = round(weighted.mean(orb_pct, mp), digits = 1),
drb_pct = round(weighted.mean(drb_pct, mp), digits = 1),
tov_pct = round(weighted.mean(tov_pct, mp, na.rm = T), digits = 1),
stl_pct = round(weighted.mean(stl_pct, mp), digits = 1),
blk_pct = round(weighted.mean(blk_pct, mp), digits = 1),
bpm = round(weighted.mean(bpm, mp), digits = 1),
vorp = round(weighted.mean(vorp, mp), digits = 1),
war = round(weighted.mean(war, mp), digits = 1)
)
DT::datatable(player_df, rownames = FALSE, options = list(dom = 't',ordering = F))
})
output$yearid <- renderUI({
selectInput("year_input", "Season:", choices = players$year[players$playerID == input$playerID], selected = max(players$year[players$playerID == input$playerID]))
})
output$percentile_graph <- renderPlot({
players <- players %>% group_by(year, playerName, playerID, age, pos) %>% summarise(
mp_w = sum(mp, na.rm = T),
vorp = sum(vorp, na.rm = T),
bpm = weighted.mean(bpm, mp, na.rm = T),
ast_pct = weighted.mean(ast_pct, mp, na.rm = T),
fg3a_per_fga_pct = weighted.mean(fg3a_per_fga_pct, mp, na.rm = T),
ts_pct = weighted.mean(ts_pct, mp, na.rm = T),
usg_pct = weighted.mean(usg_pct, mp, na.rm = T),
tov_pct = weighted.mean(tov_pct, mp, na.rm = T),
orb_pct = weighted.mean(orb_pct, mp, na.rm = T),
drb_pct = weighted.mean(drb_pct, mp, na.rm = T),
stl_pct = weighted.mean(stl_pct, mp, na.rm = T),
blk_pct = weighted.mean(blk_pct, mp, na.rm = T)
)
jbut<-players %>% mutate(war = vorp * 2.7) %>%
select(playerID, year, age, pos, usg_pct, ts_pct, fg3a_per_fga_pct,
ast_pct, orb_pct, drb_pct, tov_pct, stl_pct, blk_pct,
bpm, vorp, war) %>% group_by(year) %>% mutate(
usg_pct = round(cume_dist(usg_pct)*100),
ts_pct = round(cume_dist(ts_pct)*100),
fg3a_per_fga_pct = round(cume_dist(fg3a_per_fga_pct)*100),
ast_pct = round(cume_dist(ast_pct)*100),
orb_pct = round(cume_dist(orb_pct)*100),
drb_pct = round(cume_dist(drb_pct)*100),
tov_pct = round(cume_dist(tov_pct)*100),
stl_pct = round(cume_dist(stl_pct)*100),
blk_pct = round(cume_dist(blk_pct)*100),
bpm = round(cume_dist(bpm)*100),
vorp = round(cume_dist(vorp)*100),
war = round(cume_dist(war)*100)
) %>% filter(playerID == input$playerID) %>% ungroup() %>% select(year, usg_pct, ts_pct, fg3a_per_fga_pct,
ast_pct, orb_pct, drb_pct, tov_pct, stl_pct, blk_pct,
bpm, vorp, war)
playerGraph<-melt(jbut, id.vars = "year")
playerGraph %>% filter(year == input$year_input) %>% ggplot(aes(x = variable, y = value, fill = value)) +
geom_bar(stat = 'identity') + theme_bw() +
scale_fill_gradient2(low = 'red', mid = 'orange', high = 'yellow', midpoint = 50) +
xlab("Category") + ylab("Percentile") + ggtitle("Percentile Graph")+ geom_hline(aes(yintercept = 50), colour = "red")
})
session$onSessionEnded(stopApp)
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
shiny::runGitHub('nba_app', 'spothula')
shiny::runGitHub('nba_app', 'SanjayPothula')
library(shiny)
shiny::runGitHub('nba_app', 'SanjayPothula')
shiny::runGitHub('nba_app', 'SanjayPothula')
shiny::runGitHub('nba_app', 'SanjayPothula')
